#! /usr/bin/env python3

# Documentation:
# - https://docs.python.org/3.7/library/mailbox.html#mailbox.Maildir
# - https://docs.python.org/3.7/library/mailbox.html#mailbox.MaildirMessage

import os
import sys
import mailbox
import datetime
import subprocess

MAILDIR = os.path.expanduser("~/Maildir/FJFI")
CREATE = False
#MAILDIR = os.path.expanduser("~/stuff/Maildir-test")
#CREATE = True

if CREATE is True:
    os.makedirs(MAILDIR, exist_ok=True)

def get_mboxes():
    mboxes = []
    if not os.path.isdir(MAILDIR):
        return mboxes
    for d in os.listdir(MAILDIR):
        if os.path.isdir(os.path.join(MAILDIR, d)):
            mboxes.append(d)
    return mboxes

mboxes = get_mboxes()

def procmail(message):
    # spam
    if "***SPAM***" in message["Subject"]:
        message.set_flags("S")  # mark as seen
        message.set_subdir("cur")  # skip new subdir
        return "spam"

    # HPC-Europa
    if "cineca" in message["Subject"] or "hpc-europa3" in message["Subject"]:
        return "HPC-Europa"
    if "@cineca.it" in message["From"] or "@list.cineca.it" in message["From"] or "@hpc-europa.org" in message["From"]:
        return "HPC-Europa"

    # IT4I
    if "IT4I" in message["Subject"] or "@it4i.cz" in message["From"]:
        return "IT4I"

    # UPC
    if "@upc.cz" in message["From"]:
        return "UPC"

    # latency_test
    if message["Subject"] == "[latency test]":
        message.set_flags("S")  # mark as seen
        message.set_subdir("cur")  # skip new subdir
        return "latency_test"

    # autodetect mailbox based on the In-Reply-To: header
    if "In-Reply-To" in message:
        since = datetime.datetime.utcnow() - datetime.timedelta(days=30)
        cmd = ["find", MAILDIR,
                # skip INBOX which is the default anyway
                "-path", os.path.join(MAILDIR, "INBOX"), "-prune", "-o",
                # skip files older than 30 days to keep it fast
                "-newermt", since.strftime("%Y-%m-%d"),
                # skip directories in the output
                "-type", "f",
                # filter by the In-Reply-To header
                "-exec", "grep", "-El", "^Message-ID: " + message["In-Reply-To"] + "$", "{}", "+",
            ]
        r = subprocess.run(cmd, capture_output=True, check=False, text=True)
        if r.stderr:
            print("Command's stderr:\n{}".format(r.stderr), file=sys.stderr)
            r.check_returncode()

        # extract the mbox from the printed paths
        for fname in r.stdout.splitlines():
            if not fname:
                continue
            fname = os.path.relpath(fname, start=MAILDIR)
            mbox = fname.split("/")[0]
            if mbox in mboxes:
                return mbox

    return "INBOX"

# Passing a binary file to MaildirMessage let's it detect the correct encoding as
# specified in the Content-Type message header. sys.stdin.buffer is a binary
# buffer underlying sys.stdin which is textual.
message = mailbox.MaildirMessage(sys.stdin.buffer)

# process the message, get target mailbox
mbox = procmail(message)
if CREATE is False and mbox not in mboxes:
    raise ValueError("procmail returned an invalid mailbox")

# save the message to the mailbox
mb = mailbox.Maildir(os.path.join(MAILDIR, mbox), create=CREATE)
mb.add(message)
